name: Testing laravel application

on:
  push:
      branches: [ "main" ]
  pull_request:
      branches: [ "main" ]

jobs:
  laravel-tests:
    name: Set up Laravel tests
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: laravel
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - uses: actions/checkout@v3

    - name: Set up PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'

    - name: Copy .env
      run: php -r "file_exists('.env') || copy('.env.example', '.env');"

    - name: Install Dependencies
      run: composer install --prefer-dist --no-progress --no-suggest

    - name: Set up application for SQLite
      run: |
        touch database/database.sqlite
        echo "DB_CONNECTION=sqlite" >> .env
        echo "DB_DATABASE=${{ github.workspace }}/database/database.sqlite" >> .env
    - name: Set up security system key
      run: echo "API_BOT_TOKEN=secret >> .env"

    - name: Run migrations
      run: php artisan migrate

    - name: Generate key
      run: php artisan key:generate

    - name: Directory Permissions
      run: chmod -R 777 storage bootstrap/cache

    - name: Compile VueJS
      run: npm install && npm run build

    - name: Change session driver to file
      run: echo "SESSION_DRIVER=file" >> .env

    - name: Analyzing code project via Laravel Pint
      run: ./vendor/bin/pint --test

    - name: Execute tests via Pest
      run: vendor/bin/pest
  deploy:
    name: Deploy on production
    needs: laravel-tests
    runs-on: ubuntu-latest

    steps:
      - name: Install SSH keys
        run: |
          install -m 600 -D /dev/null ~/.ssh/id_rsa
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SSH_HOST }} > ~/.ssh/known_hosts
      - name: Connect and pull
        run: ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "cd ${{ secrets.WORK_DIR }} && git pull origin main && composer install && php artisan migrate && php artisan optimize:clear && npm run build && php artisan test && exit"
      - name: Cleanup
        run: rm -rf ~/.ssh
      - name: Notify about deploy in telegram
        run: |
          curl -X GET "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage?chat_id=${{ secrets.TELEGRAM_ADMIN_ID }}&text=ðŸŸ¢Ð”ÐµÐ¿Ð»Ð¾Ð¹+Ð·Ð°Ð²ÐµÑ€ÑˆÐµÐ½"
